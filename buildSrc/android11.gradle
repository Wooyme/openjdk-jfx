/*
 * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

ext.ANDROID11 = [:]

// Declare whether this particular target file applies to the current system
ANDROID11.canBuild = true;
if (!ANDROID11.canBuild) return;

String getLatestPlatform(String path) {
    def max = 0
    println("$path")
    file(cygpath("$path/platforms")).eachFile() {file->
        def pname = file.getName() - "android-"
        def ptf = pname?.isInteger() ? pname.toInteger() : 0
        if (max < ptf) {
            max = ptf
        }
    }
    if (max == 0) {
        return null;
    }
    return "android-" + max
}

int compareVersions(String s1, String s2) {
    def v1t = s1.tokenize(".")
    def v2t = s2.tokenize(".")
    for(int i = 0; i < v1t.size(); i++) {
        if (i == v2t.size()) {
            return 1
        }
        int n1 = v1t[i].isInteger() ? v1t[i].toInteger() : 0 
        int n2 = v2t[i].isInteger() ? v2t[i].toInteger() : 0 
        if (n1 == n2) {
            continue
        } else if (n1 > n2) {
            return 1;
        } else {
            return -1
        }
    }   
    return (v2t.size() > v1t.size()) ? -1 : 0 
}

String getLatestToolchain(String ndk, String tch) {
    def max = "0.0"
    def matchFile = null
    file(cygpath("$ndk/toolchains")).eachFile() {file->
        def filename = file.getName()
        if (filename.startsWith(tch)) {
            def p = filename - "$tch-"
            if (compareVersions(p, max) > 0) {
                max = p 
                matchFile = file
            }
        }
    }   
    return matchFile.getAbsolutePath()
}


boolean assertDir(File dir) {
    return dir != null && dir.exists() && dir.isDirectory() && dir.canRead();
}

boolean assertDir(String dir) {
    return assertDir(file(dir))
}



// All desktop related packages should be built
ANDROID11.compileSwing = false;
ANDROID11.compileSWT = false;
ANDROID11.compileFXPackager = false;

// Libraries end up in the lib/$OS_ARCH directory for Linux
ANDROID11.libDest = "lib"

// Lambda for naming the generated libs
ANDROID11.library = { name -> return "lib${name}.so" as String }


def sdk = project.hasProperty("ANDROID_SDK") ? project.getProperty("ANDROID_SDK") : null
def ndk = project.hasProperty("ANDROID_NDK") ? project.getProperty("ANDROID_NDK") : null
ANDROID11.canBuild = sdk != null && ndk != null
if (!ANDROID11.canBuild) {
    fail("Can't build Dalvik. Path to SDK or NDK was not set or is invalid!")
}
logger.info("SDK = $sdk and NDK = $ndk");
ANDROID11.canBuild = assertDir(sdk) && assertDir(ndk)
if (!ANDROID11.canBuild) {
    if (!assertDir(sdk)) {
        logger.error("Path to ANDROID_SDK is invalid! [$sdk]")
    }
    if (!assertDir(ndk)) {
        logger.error("Path to ANDROID_NDK is invalid! [$ndk]")
    }
    fail("Cannot build, missing android tools")
}

def sdk_target = project.hasProperty("ANDROID_SDK_TARGET") ?  project.getProperty("ANDROID_SDK_TARGET") : getLatestPlatform(sdk)
if (!assertDir(file("$sdk/platforms/$sdk_target"))) {
    sdk_target = getLatestPlatform(sdk)
    logger.warn("Redefine ANDROID_SDK_TARGET to: [$sdk_target]")
}

def ndk_target = project.hasProperty("ANDROID_NDK_TARGET") ? project.getProperty("ANDROID_NDK_TARGET") : getLatestPlatform(ndk)
if (!assertDir(file("$ndk/platforms/$ndk_target"))) {
    ndk_target = getLatestPlatform(ndk)
    logger.warn("Redefine ANDROID_NDK_TARGET to: [$ndk_target]")
}

ANDROID11.canBuild = sdk_target != null && ndk_target != null
if (!ANDROID11.canBuild) {
    fail("Can't determine sdk or ndk target platform!")
}


def platforms = [ "arm", "x86", "mips" ]
def toolchainArchs = [ "arm": "arm-linux-androideabi", "x86": "x86", "mips": "mipsel-linux-android" ]
def toolchainTools = [ "arm": "arm-linux-androideabi", "x86": "i686-linux-android", "mips": "mipsel-linux-android" ]
def toolchainLibs = [ "arm": ["armeabi-v7a", "armeabi"], "x86": ["x86"], "mips": ["mips"] ]

defineProperty("DALVIK_PLATFORM", platforms.get(0))
defineProperty("TOOLCHAIN_ARCH", toolchainArchs[DALVIK_PLATFORM])
defineProperty("TOOLCHAIN_TOOL", toolchainTools[DALVIK_PLATFORM])
defineProperty("TOOLCHAIN_LIB", toolchainLibs[DALVIK_PLATFORM].get(0))

def toolchainHome = project.hasProperty("ANDROID_CROSS_TOOLS_VER") ?
        "$ndk/toolchains/${ANDROID_CROSS_TOOLS_VER}" : getLatestToolchain(ndk, TOOLCHAIN_ARCH)
if (!assertDir(toolchainHome)) {
    toolchainHome = getLatestToolchain(ndk, toolchainArchs[DALVIK_PLATFORM])
    logger.warn("Redefine toolchain to [$toolchainHome]")
}

def compilerHome = file("${toolchainHome}/prebuilt").listFiles()?.head()
ANDROID11.canBuild = compilerHome != null
if (!ANDROID11.canBuild) {
    fail("Failed to access toolchain [$toolchainHome/prebuilt/$toolsPlatform]!")
}

def freetypeDir = project.hasProperty("FREETYPE_DIR") ? project.getProperty("FREETYPE_DIR") : null
if (!assertDir(freetypeDir)) {
    logger.warn("FREETYPE_DIR $freetypeDir doesn't exists! Build continues without native text support.")
    freetypeDir = null
}
def compileNativeText = freetypeDir != null

def wearableVersion = "2.0.0"

def compiler = file("$compilerHome/bin/$TOOLCHAIN_TOOL-gcc").getAbsolutePath()
def linker = file("$compilerHome/bin/$TOOLCHAIN_TOOL-g++").getAbsolutePath()

def ccSysroot = "$ndk/sysroot"
def ccCommonFlags = [ "--sysroot=$ccSysroot", "-std=c99", "-DANDROID", "-c", "-nostdlib", "-DANDROID_NDK", "-DDALVIK_VM" ]
def ccOptFlags    = [ "-fpic", "-ffunction-sections", "-funwind-tables", "-fstack-protector", "-Os", "-O2", "-fno-strict-aliasing", "-finline-limit=64", "-fomit-frame-pointer" ]
def ccWarnFlags   = [ "-Wa,--noexecstack", "-Wno-psabi" ]
def ccArchFlags   = [
        "armeabi": [ "-mthumb", "-msoft-float", "-D__ARM_ARCH_5__", "-D__ARM_ARCH_5T__", "-D__ARM_ARCH_5E__", "-D__ARM_ARCH_5TE__", "-march=armv5te" , "-mtune=xscale" ],
        "armeabi-v7a": [ "-mthumb", "-mfloat-abi=softfp", "-mfpu=vfpv3-d16", "-march=armv7-a" ],
        "x86": [ "-march=i686", "-mtune=intel", "-msse3", "-mfpmath=sse", "-m32" ],
        "mips": []
    ]
def ccDebugFlags  = [ IS_DEBUG_NATIVE ? "-DDEBUG" : "-DNDEBUG" ]
def ccDefaultIncludeFlags = [ "-I$ccSysroot/usr/include", "-I$ccSysroot/usr/include/$TOOLCHAIN_TOOL" ]
def ccFlags       = [ ccCommonFlags, ccOptFlags, ccWarnFlags, ccArchFlags[TOOLCHAIN_LIB], ccDebugFlags, ccDefaultIncludeFlags ]

def linkSysroot = "$ndk/platforms/$ndk_target/arch-$DALVIK_PLATFORM" as String
def linkCommonFlags = [ "--sysroot=$linkSysroot", "-Wl,--no-undefined", "-Wl,-z,noexecstack", "-lc", "-lm", "-shared", "-L$linkSysroot/usr/lib" ]
def linkArchFlags   = [
        "armeabi": [],
        "armeabi-v7a": [ "-march=armv7-a", "-Wl,--fix-cortex-a8" ],
        "x86": [],
        "mips": []
]
def linkFlags       = [ linkCommonFlags, linkArchFlags[TOOLCHAIN_LIB] ]

ANDROID11.glass = [:]
ANDROID11.glass.variants = ["monocle"]
ext.IS_COMPILE_PANGO = false
ext.COMPILE_SWING = false

ANDROID11.compileSwing = true
ANDROID11.compileSWT = false
ANDROID11.compileFXPackager = false
ANDROID11.compileWebnodeNative = false
ANDROID11.compileMediaNative = false

ANDROID11.includeLens = false
ANDROID11.includeMonocle = true
ANDROID11.includeEGL = true
ANDROID11.includeSwing = false
ANDROID11.includeSWT = false

ANDROID11.javafxPlatformDefault="monocle"

ANDROID11.arch = TOOLCHAIN_LIB
ANDROID11.libDest = "lib"

ANDROID11.library = { name -> return "lib${name}.so" as String }

ANDROID11.activity = [:]
ANDROID11.activity.nativeSource = file("${project(":graphics").projectDir}/src/dalvik/native")
ANDROID11.activity.compiler = compiler
ANDROID11.activity.ccFlags = [ ccFlags, "-I${project(":graphics").buildDir}/gensrc/headers/dalvik" ].flatten()
ANDROID11.activity.linker = linker
ANDROID11.activity.linkFlags = [ linkFlags, "-landroid", "-llog" ].flatten()
ANDROID11.activity.lib = "activity"

ANDROID11.webview = [:]
ANDROID11.webview.nativeSource = file("modules/javafx.web/src/android/native")
ANDROID11.webview.compiler = compiler
ANDROID11.webview.ccFlags = [ ccFlags, "-I${project(":web").buildDir}/gensrc/headers/dalvik" ].flatten()
ANDROID11.webview.linker = linker
ANDROID11.webview.linkFlags = [ linkFlags, "-ldl", "-llog" ].flatten()
ANDROID11.webview.lib = "webview"
ANDROID11.glass = [:]
ANDROID11.glass.variants = ["monocle"]
ANDROID11.glass.compiler = compiler
ANDROID11.glass.ccFlags = [ ccFlags ].flatten()
ANDROID11.glass.linker = linker
ANDROID11.glass.linkFlags = [ linkFlags ].flatten()
ANDROID11.glass.lib = "glass"

ANDROID11.glass.monocle = [:]
ANDROID11.glass.monocle.nativeSource = [
        file("${project(":graphics").projectDir}/src/main/native-glass/monocle"),
        file("${project(":graphics").projectDir}/src/main/native-glass/monocle/android"),
        file("${project(":graphics").projectDir}/src/main/native-glass/monocle/util") ]
ANDROID11.glass.monocle.compiler = compiler
ANDROID11.glass.monocle.ccFlags = [ ccFlags, "-DISEGLFB", "-I", file("${project(":graphics").projectDir}/src/main/native-glass/monocle/"), "-I", file("${project(":graphics").projectDir}/src/dalvik/native/")].flatten()
ANDROID11.glass.monocle.linker = linker
ANDROID11.glass.monocle.linkFlags = [ linkFlags, "-ldl", "-llog", "-landroid", "-lGLESv2", "-lEGL" ].flatten()
ANDROID11.glass.monocle.lib = "glass_monocle"

ANDROID11.prism = [:]
ANDROID11.prism.nativeSource = file("${project(":graphics").projectDir}/src/main/native-prism")
ANDROID11.prism.compiler = compiler
ANDROID11.prism.ccFlags = [ ccFlags ].flatten()
ANDROID11.prism.linker = linker
ANDROID11.prism.linkFlags = [ linkFlags ].flatten()
ANDROID11.prism.lib = "prism_common"

ANDROID11.prismSW = [:]
ANDROID11.prismSW.nativeSource = file("${project(":graphics").projectDir}/src/main/native-prism-sw")
ANDROID11.prismSW.compiler = compiler
ANDROID11.prismSW.ccFlags = [ ccFlags ].flatten()
ANDROID11.prismSW.linker = linker
ANDROID11.prismSW.linkFlags = [ linkFlags ].flatten()
ANDROID11.prismSW.lib = "prism_sw"

ANDROID11.decora = [:]
ANDROID11.decora.compiler = compiler
ANDROID11.decora.ccFlags = [ ccFlags ].flatten()
ANDROID11.decora.linker = linker
ANDROID11.decora.linkFlags = [ linkFlags ].flatten()
ANDROID11.decora.lib = "decora_sse"
ANDROID11.iio = [:]
ANDROID11.iio.nativeSource = [
        file("${project(":graphics").projectDir}/src/main/native-iio"),
        file("${project(":graphics").projectDir}/src/main/native-iio/libjpeg7")]
ANDROID11.iio.compiler = compiler
ANDROID11.iio.ccFlags = [ ccFlags ].flatten()
ANDROID11.iio.linker = linker
ANDROID11.iio.linkFlags = [ linkFlags ].flatten()
ANDROID11.iio.lib = "javafx_iio"

ANDROID11.prismES2 = [:]
ANDROID11.prismES2.variants = ["monocle"]

ANDROID11.prismES2.monocle= [:]
ANDROID11.prismES2.monocle.nativeSource = [
        file("${project(":graphics").projectDir}/src/main/native-prism-es2"),
        file("${project(":graphics").projectDir}/src/main/native-prism-es2/GL"),
        file("${project(":graphics").projectDir}/src/main/native-prism-es2/eglWrapper"),
        file("${project(":graphics").projectDir}/src/main/native-prism-es2/monocle")
]
ANDROID11.prismES2.monocle.compiler = compiler
ANDROID11.prismES2.monocle.ccFlags = [ ccFlags, "-DIS_EGLFB" ].flatten()
ANDROID11.prismES2.monocle.linker = linker
ANDROID11.prismES2.monocle.linkFlags = [ linkFlags, "-ldl", "-llog", "-lGLESv2", "-lEGL" ].flatten()
ANDROID11.prismES2.monocle.lib = "prism_es2_monocle"

ANDROID11.font = [:]
ANDROID11.font.nativeSource = [file("${project(":graphics").projectDir}/javafx-font-native/src")]
ANDROID11.font.compiler = compiler
ANDROID11.font.ccFlags = [ ccFlags ].flatten()
ANDROID11.font.linker = linker
ANDROID11.font.linkFlags = [ linkFlags ].flatten()
ANDROID11.font.lib = "javafx_font"

if (compileNativeText) {
    ANDROID11.fontFreetype = [:]
    ANDROID11.fontFreetype.nativeSource = [file("${project(":graphics").projectDir}/src/main/native-font/freetype.c")]
    ANDROID11.fontFreetype.compiler = compiler
    ANDROID11.fontFreetype.ccFlags = [ccFlags, "-D_ENABLE_HARFBUZZ", "-I${project(":graphics").buildDir}/gensrc/headers/javafx.graphics", "-I$freetypeDir/include", "-I$freetypeDir/include/freetype2"].flatten()
    ANDROID11.fontFreetype.linker = linker
    ANDROID11.fontFreetype.linkFlags = [linkFlags, "-llog", "-L$freetypeDir/lib", "$freetypeDir/lib/libfreetype.a"].flatten()
    ANDROID11.fontFreetype.lib = "javafx_font_freetype"
}
ANDROID11.media = [:]
ANDROID11.media.compiler = compiler
ANDROID11.media.linker = linker
ANDROID11.media.ar = "$compilerHome/bin/$TOOLCHAIN_TOOL-ar"

project.ext.defaultModuleSourcePath =
        cygpath(rootProject.projectDir.path + '/modules/*/src/main/java') +
                File.pathSeparator  +
                cygpath(rootProject.projectDir.path + '/modules/*/build/gensrc/{java,jsl-decora,jsl-prism}')



project(":graphics") {

    task compileDalvikLibs(type: JavaCompile, group: "Build") {
        description = "Task compiles android vm based libraries."
        options.bootClasspath = "$sdk/platforms/$sdk_target/android.jar"
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        classpath = files("build/classes/android", "build/classes/main")
        destinationDir = file("build/classes/android")
        source fileTree(dir: 'src/android/java').matching { include '**' }
    }

    task jarDalvikLibs(type: Jar, group: "Build", dependsOn: compileDalvikLibs) {
        description = "Creates jfxdvk.jar with all android based classes."
        archiveName = "jfxdvk.jar"
        includeEmptyDirs = false
        from("build/classes/android")
        include("javafxports/**/*")
        include("com/oracle/**/*")
        dependsOn(compileDalvikLibs)
    }
    task copyJfxdvk(type: Copy, dependsOn: jarDalvikLibs) {
            from "build/libs"
            into "${rootProject.buildDir}/android11-sdk/lib"
            include("*.jar")
        }

    project.task("sdk").dependsOn(copyJfxdvk);
    project.task("sdkAndroid11").dependsOn(jarDalvikLibs);

}

